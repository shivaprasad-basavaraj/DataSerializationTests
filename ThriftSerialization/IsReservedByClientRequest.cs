/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class IsReservedByClientRequest : TBase
{
  private string _reservation_id;
  private string _client_id;

  public string Reservation_id
  {
    get
    {
      return _reservation_id;
    }
    set
    {
      __isset.reservation_id = true;
      this._reservation_id = value;
    }
  }

  public string Client_id
  {
    get
    {
      return _client_id;
    }
    set
    {
      __isset.client_id = true;
      this._client_id = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool reservation_id;
    public bool client_id;
  }

  public IsReservedByClientRequest()
  {
  }

  public IsReservedByClientRequest DeepCopy()
  {
    var tmp33 = new IsReservedByClientRequest();
    if((Reservation_id != null) && __isset.reservation_id)
    {
      tmp33.Reservation_id = this.Reservation_id;
    }
    tmp33.__isset.reservation_id = this.__isset.reservation_id;
    if((Client_id != null) && __isset.client_id)
    {
      tmp33.Client_id = this.Client_id;
    }
    tmp33.__isset.client_id = this.__isset.client_id;
    return tmp33;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Reservation_id = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Client_id = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp34 = new TStruct("IsReservedByClientRequest");
      await oprot.WriteStructBeginAsync(tmp34, cancellationToken);
      var tmp35 = new TField();
      if((Reservation_id != null) && __isset.reservation_id)
      {
        tmp35.Name = "reservation_id";
        tmp35.Type = TType.String;
        tmp35.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
        await oprot.WriteStringAsync(Reservation_id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Client_id != null) && __isset.client_id)
      {
        tmp35.Name = "client_id";
        tmp35.Type = TType.String;
        tmp35.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
        await oprot.WriteStringAsync(Client_id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is IsReservedByClientRequest other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.reservation_id == other.__isset.reservation_id) && ((!__isset.reservation_id) || (System.Object.Equals(Reservation_id, other.Reservation_id))))
      && ((__isset.client_id == other.__isset.client_id) && ((!__isset.client_id) || (System.Object.Equals(Client_id, other.Client_id))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Reservation_id != null) && __isset.reservation_id)
      {
        hashcode = (hashcode * 397) + Reservation_id.GetHashCode();
      }
      if((Client_id != null) && __isset.client_id)
      {
        hashcode = (hashcode * 397) + Client_id.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp36 = new StringBuilder("IsReservedByClientRequest(");
    int tmp37 = 0;
    if((Reservation_id != null) && __isset.reservation_id)
    {
      if(0 < tmp37++) { tmp36.Append(", "); }
      tmp36.Append("Reservation_id: ");
      Reservation_id.ToString(tmp36);
    }
    if((Client_id != null) && __isset.client_id)
    {
      if(0 < tmp37++) { tmp36.Append(", "); }
      tmp36.Append("Client_id: ");
      Client_id.ToString(tmp36);
    }
    tmp36.Append(')');
    return tmp36.ToString();
  }
}

