/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class EnumerateDevicesResponse : TBase
{
  private List<DeviceProperties> _devices;

  public List<DeviceProperties> Devices
  {
    get
    {
      return _devices;
    }
    set
    {
      __isset.devices = true;
      this._devices = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool devices;
  }

  public EnumerateDevicesResponse()
  {
  }

  public EnumerateDevicesResponse DeepCopy()
  {
    var tmp14 = new EnumerateDevicesResponse();
    if((Devices != null) && __isset.devices)
    {
      tmp14.Devices = this.Devices.DeepCopy();
    }
    tmp14.__isset.devices = this.__isset.devices;
    return tmp14;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list15 = await iprot.ReadListBeginAsync(cancellationToken);
                Devices = new List<DeviceProperties>(_list15.Count);
                for(int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  DeviceProperties _elem17;
                  _elem17 = new DeviceProperties();
                  await _elem17.ReadAsync(iprot, cancellationToken);
                  Devices.Add(_elem17);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp18 = new TStruct("EnumerateDevicesResponse");
      await oprot.WriteStructBeginAsync(tmp18, cancellationToken);
      var tmp19 = new TField();
      if((Devices != null) && __isset.devices)
      {
        tmp19.Name = "devices";
        tmp19.Type = TType.List;
        tmp19.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp19, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Devices.Count), cancellationToken);
          foreach (DeviceProperties _iter20 in Devices)
          {
            await _iter20.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is EnumerateDevicesResponse other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.devices == other.__isset.devices) && ((!__isset.devices) || (TCollections.Equals(Devices, other.Devices))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Devices != null) && __isset.devices)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Devices);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp21 = new StringBuilder("EnumerateDevicesResponse(");
    int tmp22 = 0;
    if((Devices != null) && __isset.devices)
    {
      if(0 < tmp22++) { tmp21.Append(", "); }
      tmp21.Append("Devices: ");
      Devices.ToString(tmp21);
    }
    tmp21.Append(')');
    return tmp21.ToString();
  }
}

