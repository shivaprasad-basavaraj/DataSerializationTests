/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System.Text;
using System.Threading;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class DeviceProperties : TBase
{
  private string _name;
  private string _model;
  private string _vendor;
  private string _serial_number;

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Model
  {
    get
    {
      return _model;
    }
    set
    {
      __isset.model = true;
      this._model = value;
    }
  }

  public string Vendor
  {
    get
    {
      return _vendor;
    }
    set
    {
      __isset.vendor = true;
      this._vendor = value;
    }
  }

  public string Serial_number
  {
    get
    {
      return _serial_number;
    }
    set
    {
      __isset.serial_number = true;
      this._serial_number = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool name;
    public bool model;
    public bool vendor;
    public bool serial_number;
  }

  public DeviceProperties()
  {
  }

  public DeviceProperties DeepCopy()
  {
    var tmp5 = new DeviceProperties();
    if((Name != null) && __isset.name)
    {
      tmp5.Name = this.Name;
    }
    tmp5.__isset.name = this.__isset.name;
    if((Model != null) && __isset.model)
    {
      tmp5.Model = this.Model;
    }
    tmp5.__isset.model = this.__isset.model;
    if((Vendor != null) && __isset.vendor)
    {
      tmp5.Vendor = this.Vendor;
    }
    tmp5.__isset.vendor = this.__isset.vendor;
    if((Serial_number != null) && __isset.serial_number)
    {
      tmp5.Serial_number = this.Serial_number;
    }
    tmp5.__isset.serial_number = this.__isset.serial_number;
    return tmp5;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Model = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.String)
            {
              Vendor = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Serial_number = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp6 = new TStruct("DeviceProperties");
      await oprot.WriteStructBeginAsync(tmp6, cancellationToken);
      var tmp7 = new TField();
      if((Name != null) && __isset.name)
      {
        tmp7.Name = "name";
        tmp7.Type = TType.String;
        tmp7.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Model != null) && __isset.model)
      {
        tmp7.Name = "model";
        tmp7.Type = TType.String;
        tmp7.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
        await oprot.WriteStringAsync(Model, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Vendor != null) && __isset.vendor)
      {
        tmp7.Name = "vendor";
        tmp7.Type = TType.String;
        tmp7.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
        await oprot.WriteStringAsync(Vendor, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Serial_number != null) && __isset.serial_number)
      {
        tmp7.Name = "serial_number";
        tmp7.Type = TType.String;
        tmp7.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
        await oprot.WriteStringAsync(Serial_number, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is DeviceProperties other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
      && ((__isset.model == other.__isset.model) && ((!__isset.model) || (System.Object.Equals(Model, other.Model))))
      && ((__isset.vendor == other.__isset.vendor) && ((!__isset.vendor) || (System.Object.Equals(Vendor, other.Vendor))))
      && ((__isset.serial_number == other.__isset.serial_number) && ((!__isset.serial_number) || (System.Object.Equals(Serial_number, other.Serial_number))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Name != null) && __isset.name)
      {
        hashcode = (hashcode * 397) + Name.GetHashCode();
      }
      if((Model != null) && __isset.model)
      {
        hashcode = (hashcode * 397) + Model.GetHashCode();
      }
      if((Vendor != null) && __isset.vendor)
      {
        hashcode = (hashcode * 397) + Vendor.GetHashCode();
      }
      if((Serial_number != null) && __isset.serial_number)
      {
        hashcode = (hashcode * 397) + Serial_number.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp8 = new StringBuilder("DeviceProperties(");
    int tmp9 = 0;
    if((Name != null) && __isset.name)
    {
      if(0 < tmp9++) { tmp8.Append(", "); }
      tmp8.Append("Name: ");
      Name.ToString(tmp8);
    }
    if((Model != null) && __isset.model)
    {
      if(0 < tmp9++) { tmp8.Append(", "); }
      tmp8.Append("Model: ");
      Model.ToString(tmp8);
    }
    if((Vendor != null) && __isset.vendor)
    {
      if(0 < tmp9++) { tmp8.Append(", "); }
      tmp8.Append("Vendor: ");
      Vendor.ToString(tmp8);
    }
    if((Serial_number != null) && __isset.serial_number)
    {
      if(0 < tmp9++) { tmp8.Append(", "); }
      tmp8.Append("Serial_number: ");
      Serial_number.ToString(tmp8);
    }
    tmp8.Append(')');
    return tmp8.ToString();
  }
}

