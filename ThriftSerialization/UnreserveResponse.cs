/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class UnreserveResponse : TBase
{
  private bool _is_unreserved;

  public bool Is_unreserved
  {
    get
    {
      return _is_unreserved;
    }
    set
    {
      __isset.is_unreserved = true;
      this._is_unreserved = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool is_unreserved;
  }

  public UnreserveResponse()
  {
  }

  public UnreserveResponse DeepCopy()
  {
    var tmp48 = new UnreserveResponse();
    if(__isset.is_unreserved)
    {
      tmp48.Is_unreserved = this.Is_unreserved;
    }
    tmp48.__isset.is_unreserved = this.__isset.is_unreserved;
    return tmp48;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool)
            {
              Is_unreserved = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp49 = new TStruct("UnreserveResponse");
      await oprot.WriteStructBeginAsync(tmp49, cancellationToken);
      var tmp50 = new TField();
      if(__isset.is_unreserved)
      {
        tmp50.Name = "is_unreserved";
        tmp50.Type = TType.Bool;
        tmp50.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp50, cancellationToken);
        await oprot.WriteBoolAsync(Is_unreserved, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is UnreserveResponse other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.is_unreserved == other.__isset.is_unreserved) && ((!__isset.is_unreserved) || (System.Object.Equals(Is_unreserved, other.Is_unreserved))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.is_unreserved)
      {
        hashcode = (hashcode * 397) + Is_unreserved.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp51 = new StringBuilder("UnreserveResponse(");
    int tmp52 = 0;
    if(__isset.is_unreserved)
    {
      if(0 < tmp52++) { tmp51.Append(", "); }
      tmp51.Append("Is_unreserved: ");
      Is_unreserved.ToString(tmp51);
    }
    tmp51.Append(')');
    return tmp51.ToString();
  }
}

