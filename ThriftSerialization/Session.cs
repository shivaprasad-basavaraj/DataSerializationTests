/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class Session : TBase
{
  private string _name;
  private int _id;

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public int Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool name;
    public bool id;
  }

  public Session()
  {
  }

  public Session DeepCopy()
  {
    var tmp0 = new Session();
    if((Name != null) && __isset.name)
    {
      tmp0.Name = this.Name;
    }
    tmp0.__isset.name = this.__isset.name;
    if(__isset.id)
    {
      tmp0.Id = this.Id;
    }
    tmp0.__isset.id = this.__isset.id;
    return tmp0;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Id = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp1 = new TStruct("Session");
      await oprot.WriteStructBeginAsync(tmp1, cancellationToken);
      var tmp2 = new TField();
      if((Name != null) && __isset.name)
      {
        tmp2.Name = "name";
        tmp2.Type = TType.String;
        tmp2.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.id)
      {
        tmp2.Name = "id";
        tmp2.Type = TType.I32;
        tmp2.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
        await oprot.WriteI32Async(Id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is Session other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
      && ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Name != null) && __isset.name)
      {
        hashcode = (hashcode * 397) + Name.GetHashCode();
      }
      if(__isset.id)
      {
        hashcode = (hashcode * 397) + Id.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp3 = new StringBuilder("Session(");
    int tmp4 = 0;
    if((Name != null) && __isset.name)
    {
      if(0 < tmp4++) { tmp3.Append(", "); }
      tmp3.Append("Name: ");
      Name.ToString(tmp3);
    }
    if(__isset.id)
    {
      if(0 < tmp4++) { tmp3.Append(", "); }
      tmp3.Append("Id: ");
      Id.ToString(tmp3);
    }
    tmp3.Append(')');
    return tmp3.ToString();
  }
}

