// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::FlatBuffers;

public enum Session : byte
{
  NONE = 0,
  name = 1,
  id = 2,
};

public struct session_id : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public session_id __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { return __p.bb.GetUint(__p.bb_pos + 0); } }

  public static Offset<session_id> Createsession_id(FlatBufferBuilder builder, uint Id) {
    builder.Prep(4, 4);
    builder.PutUint(Id);
    return new Offset<session_id>(builder.Offset);
  }
};

public struct DeviceProperties : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static DeviceProperties GetRootAsDeviceProperties(ByteBuffer _bb) { return GetRootAsDeviceProperties(_bb, new DeviceProperties()); }
  public static DeviceProperties GetRootAsDeviceProperties(ByteBuffer _bb, DeviceProperties obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DeviceProperties __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Model { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetModelBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetModelBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetModelArray() { return __p.__vector_as_array<byte>(6); }
  public string Vendor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVendorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetVendorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetVendorArray() { return __p.__vector_as_array<byte>(8); }
  public string SerialNumber { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSerialNumberBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSerialNumberBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSerialNumberArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<DeviceProperties> CreateDeviceProperties(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset modelOffset = default(StringOffset),
      StringOffset vendorOffset = default(StringOffset),
      StringOffset serial_numberOffset = default(StringOffset)) {
    builder.StartTable(4);
    DeviceProperties.AddSerialNumber(builder, serial_numberOffset);
    DeviceProperties.AddVendor(builder, vendorOffset);
    DeviceProperties.AddModel(builder, modelOffset);
    DeviceProperties.AddName(builder, nameOffset);
    return DeviceProperties.EndDeviceProperties(builder);
  }

  public static void StartDeviceProperties(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddModel(FlatBufferBuilder builder, StringOffset modelOffset) { builder.AddOffset(1, modelOffset.Value, 0); }
  public static void AddVendor(FlatBufferBuilder builder, StringOffset vendorOffset) { builder.AddOffset(2, vendorOffset.Value, 0); }
  public static void AddSerialNumber(FlatBufferBuilder builder, StringOffset serialNumberOffset) { builder.AddOffset(3, serialNumberOffset.Value, 0); }
  public static Offset<DeviceProperties> EndDeviceProperties(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<DeviceProperties>(o);
  }
};

public struct EnumerateDevicesRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EnumerateDevicesRequest GetRootAsEnumerateDevicesRequest(ByteBuffer _bb) { return GetRootAsEnumerateDevicesRequest(_bb, new EnumerateDevicesRequest()); }
  public static EnumerateDevicesRequest GetRootAsEnumerateDevicesRequest(ByteBuffer _bb, EnumerateDevicesRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EnumerateDevicesRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartEnumerateDevicesRequest(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<EnumerateDevicesRequest> EndEnumerateDevicesRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EnumerateDevicesRequest>(o);
  }
};

public struct EnumerateDevicesResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EnumerateDevicesResponse GetRootAsEnumerateDevicesResponse(ByteBuffer _bb) { return GetRootAsEnumerateDevicesResponse(_bb, new EnumerateDevicesResponse()); }
  public static EnumerateDevicesResponse GetRootAsEnumerateDevicesResponse(ByteBuffer _bb, EnumerateDevicesResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EnumerateDevicesResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public DeviceProperties? Devices(int j) { int o = __p.__offset(4); return o != 0 ? (DeviceProperties?)(new DeviceProperties()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DevicesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<EnumerateDevicesResponse> CreateEnumerateDevicesResponse(FlatBufferBuilder builder,
      VectorOffset devicesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EnumerateDevicesResponse.AddDevices(builder, devicesOffset);
    return EnumerateDevicesResponse.EndEnumerateDevicesResponse(builder);
  }

  public static void StartEnumerateDevicesResponse(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDevices(FlatBufferBuilder builder, VectorOffset devicesOffset) { builder.AddOffset(0, devicesOffset.Value, 0); }
  public static VectorOffset CreateDevicesVector(FlatBufferBuilder builder, Offset<DeviceProperties>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDevicesVectorBlock(FlatBufferBuilder builder, Offset<DeviceProperties>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDevicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<EnumerateDevicesResponse> EndEnumerateDevicesResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<EnumerateDevicesResponse>(o);
  }
};

public struct ReserveRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ReserveRequest GetRootAsReserveRequest(ByteBuffer _bb) { return GetRootAsReserveRequest(_bb, new ReserveRequest()); }
  public static ReserveRequest GetRootAsReserveRequest(ByteBuffer _bb, ReserveRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ReserveRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ReservationId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReservationIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetReservationIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetReservationIdArray() { return __p.__vector_as_array<byte>(4); }
  public string ClientId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClientIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClientIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClientIdArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<ReserveRequest> CreateReserveRequest(FlatBufferBuilder builder,
      StringOffset reservation_idOffset = default(StringOffset),
      StringOffset client_idOffset = default(StringOffset)) {
    builder.StartTable(2);
    ReserveRequest.AddClientId(builder, client_idOffset);
    ReserveRequest.AddReservationId(builder, reservation_idOffset);
    return ReserveRequest.EndReserveRequest(builder);
  }

  public static void StartReserveRequest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddReservationId(FlatBufferBuilder builder, StringOffset reservationIdOffset) { builder.AddOffset(0, reservationIdOffset.Value, 0); }
  public static void AddClientId(FlatBufferBuilder builder, StringOffset clientIdOffset) { builder.AddOffset(1, clientIdOffset.Value, 0); }
  public static Offset<ReserveRequest> EndReserveRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ReserveRequest>(o);
  }
};

public struct ReserveResponse : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ReserveResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsReserved { get { return 0!=__p.bb.Get(__p.bb_pos + 0); } }

  public static Offset<ReserveResponse> CreateReserveResponse(FlatBufferBuilder builder, bool IsReserved) {
    builder.Prep(1, 1);
    builder.PutBool(IsReserved);
    return new Offset<ReserveResponse>(builder.Offset);
  }
};

public struct IsReservedByClientRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static IsReservedByClientRequest GetRootAsIsReservedByClientRequest(ByteBuffer _bb) { return GetRootAsIsReservedByClientRequest(_bb, new IsReservedByClientRequest()); }
  public static IsReservedByClientRequest GetRootAsIsReservedByClientRequest(ByteBuffer _bb, IsReservedByClientRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IsReservedByClientRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ReservationId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReservationIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetReservationIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetReservationIdArray() { return __p.__vector_as_array<byte>(4); }
  public string ClientId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClientIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClientIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClientIdArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<IsReservedByClientRequest> CreateIsReservedByClientRequest(FlatBufferBuilder builder,
      StringOffset reservation_idOffset = default(StringOffset),
      StringOffset client_idOffset = default(StringOffset)) {
    builder.StartTable(2);
    IsReservedByClientRequest.AddClientId(builder, client_idOffset);
    IsReservedByClientRequest.AddReservationId(builder, reservation_idOffset);
    return IsReservedByClientRequest.EndIsReservedByClientRequest(builder);
  }

  public static void StartIsReservedByClientRequest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddReservationId(FlatBufferBuilder builder, StringOffset reservationIdOffset) { builder.AddOffset(0, reservationIdOffset.Value, 0); }
  public static void AddClientId(FlatBufferBuilder builder, StringOffset clientIdOffset) { builder.AddOffset(1, clientIdOffset.Value, 0); }
  public static Offset<IsReservedByClientRequest> EndIsReservedByClientRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<IsReservedByClientRequest>(o);
  }
};

public struct IsReservedByClientResponse : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public IsReservedByClientResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsReserved { get { return 0!=__p.bb.Get(__p.bb_pos + 0); } }

  public static Offset<IsReservedByClientResponse> CreateIsReservedByClientResponse(FlatBufferBuilder builder, bool IsReserved) {
    builder.Prep(1, 1);
    builder.PutBool(IsReserved);
    return new Offset<IsReservedByClientResponse>(builder.Offset);
  }
};

public struct UnreserveRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static UnreserveRequest GetRootAsUnreserveRequest(ByteBuffer _bb) { return GetRootAsUnreserveRequest(_bb, new UnreserveRequest()); }
  public static UnreserveRequest GetRootAsUnreserveRequest(ByteBuffer _bb, UnreserveRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UnreserveRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ReservationId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReservationIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetReservationIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetReservationIdArray() { return __p.__vector_as_array<byte>(4); }
  public string ClientId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClientIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClientIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClientIdArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<UnreserveRequest> CreateUnreserveRequest(FlatBufferBuilder builder,
      StringOffset reservation_idOffset = default(StringOffset),
      StringOffset client_idOffset = default(StringOffset)) {
    builder.StartTable(2);
    UnreserveRequest.AddClientId(builder, client_idOffset);
    UnreserveRequest.AddReservationId(builder, reservation_idOffset);
    return UnreserveRequest.EndUnreserveRequest(builder);
  }

  public static void StartUnreserveRequest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddReservationId(FlatBufferBuilder builder, StringOffset reservationIdOffset) { builder.AddOffset(0, reservationIdOffset.Value, 0); }
  public static void AddClientId(FlatBufferBuilder builder, StringOffset clientIdOffset) { builder.AddOffset(1, clientIdOffset.Value, 0); }
  public static Offset<UnreserveRequest> EndUnreserveRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<UnreserveRequest>(o);
  }
};

public struct UnreserveResponse : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public UnreserveResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsUnreserved { get { return 0!=__p.bb.Get(__p.bb_pos + 0); } }

  public static Offset<UnreserveResponse> CreateUnreserveResponse(FlatBufferBuilder builder, bool IsUnreserved) {
    builder.Prep(1, 1);
    builder.PutBool(IsUnreserved);
    return new Offset<UnreserveResponse>(builder.Offset);
  }
};

public struct ResetServerRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ResetServerRequest GetRootAsResetServerRequest(ByteBuffer _bb) { return GetRootAsResetServerRequest(_bb, new ResetServerRequest()); }
  public static ResetServerRequest GetRootAsResetServerRequest(ByteBuffer _bb, ResetServerRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ResetServerRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartResetServerRequest(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<ResetServerRequest> EndResetServerRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<ResetServerRequest>(o);
  }
};

public struct ResetServerResponse : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public ResetServerResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsServerReset { get { return 0!=__p.bb.Get(__p.bb_pos + 0); } }

  public static Offset<ResetServerResponse> CreateResetServerResponse(FlatBufferBuilder builder, bool IsServerReset) {
    builder.Prep(1, 1);
    builder.PutBool(IsServerReset);
    return new Offset<ResetServerResponse>(builder.Offset);
  }
};

